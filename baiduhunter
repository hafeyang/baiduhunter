#!/usr/bin/env node

var fs = require("fs"),
    jshint = require("./lib/jshint").JSHINT,
    commander = require("./lib/commander"),
    config = require("./conf/cfg"),
    path = require("path"),
    fileNameFilter = null, fileExtFilter = null,
    files = [];

// {{{ commander.js处理命令行参数
/* 
 * 解析命令行参数
 */
commander
    .version("0.0.1")
    .option("-c --conf <string>", "Configuration file")
    .option("-s --src <string>", "Source to be check, file or dir")
    .parse(process.argv);

if(commander.conf) {
    config = require(commander.conf);
}
fileNameFilter = new RegExp(config.ignoreFiles.join("|"));
fileExtFilter = new RegExp(config.fileExt.join("|"));
function recursiveFindAllFile(accm, dir) {
    var files = fs.readdirSync(dir);
    files.forEach(function(file, index, arr) {
        var pathName = path.resolve(dir + "/" + file),
            stat = fs.lstatSync(pathName);
        if(stat.isDirectory()) {
            recursiveFindAllFile(accm, pathName);
        } else {
            if(!fileNameFilter.test(file) && fileExtFilter.test(file)) {
                accm.push(pathName);    
            }
        }
    });
}
if(commander.src) {
    recursiveFindAllFile(files, commander.src);
}
// }}}
// {{{ 处理HTML文件的代码 processHTML
/* ================  分界线，上面是处理程序调用的参数的，下面是处理html文件的 ==============*/
/*
 * 解析出HTML文件中的JavaScript代码
 * @param {string} fileName 要解析的文件名称，必须是.html或.htm结尾的
 * @return {string} 从文件中提取出来的JavaScript代码，如果没有就返回空字符串
 */
function processHTML(fileName) {
    var script = "", html, matches,
        ltBegin = 0, gtBegin = 0,
        endScriptTag = 0;
    if(fileName.indexOf(".html") === -1 || fileName.indexOf(".htm") === -1) {
        return script;
    }
    html = fs.readFileSync(fileName, "utf-8");
    ltBegin = html.indexOf("<script", ltBegin);
    while(ltBegin !== -1) {
        gtBegin = html.indexOf(">", ltBegin);
        endScriptTag = html.indexOf("</script>", gtBegin);
        script += html.substring(gtBegin + 1, endScriptTag).trim();
        ltBegin = html.indexOf("<script", ltBegin + 1);
    }
    return script;
}
// }}}
function beginHint() {
    files.forEach(function(val, index, arr) {
        var scripts = null;
        if(val.indexOf(".html") !== -1) {
            scripts = processHTML(val);
        } else {
            scripts = fs.readFileSync(val, "utf-8");
        }
        if(!jshint(scripts)) {
            var out = jshint.data(),
                errors = out.errors;

            for(var j = 0; j < errors.length; j++) {
                var error = errors[j];
                console.log(JSON.stringify(error));
            }
        }
    });
}
//console.log(config.hint);
beginHint();
/*
for(var i = 2; i < files.length; i++) {
    var fileName = files[i];
    fs.readFile(fileName, function(err, data) {
        if(err) {
            throw err;
        }
        if(jshint(data.toString("utf-8"), { onevar: false })) {
            console.log("File " + fileName + "has no error.");
        } else {
            console.log("Error in file " + fileName);
            console.log('');

    });
}
*/
