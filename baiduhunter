#!/usr/bin/env node

var fs = require("fs"),
    jshint = require("./lib/jshint").JSHINT,
    commander = require("./lib/commander"),
    config = require("./conf/cfg"),
    path = require("path"),
    cc = require("./customcheck"),
    _ = require("./lib/underscore"),
    fileNameFilter = null, fileExtFilter = null,
    template, files = [], totalFiles = 0,
    reportName;

var output = {
    error: 0,
    warning: 0,
    ignored: 0,
    total: 0,
    time: new Date().toLocaleString(),
    files: []
};
// {{{ commander.js处理命令行参数
/* 
 * 解析命令行参数
 */
commander
    .version("0.0.1")
    .option("-c --conf <string>", "Configuration file")
    .option("-s --src <string>", "Source to be check, file or dir")
    .parse(process.argv);

if(commander.conf) {
    config = require(commander.conf);
}
fileNameFilter = new RegExp("(" + config.ignoreFiles.join("|")+ ")");
fileExtFilter = new RegExp(config.fileExt.join("|"));
function recursiveFindAllFile(accm, dir) {
    var files = fs.readdirSync(dir);
    files.forEach(function(file, index, arr) {
        var pathName = path.resolve(dir + "/" + file),
            stat = fs.lstatSync(pathName);
        if(stat.isDirectory()) {
            recursiveFindAllFile(accm, pathName);
        } else {
            totalFiles++;
            if(fileExtFilter.test(pathName) && !fileNameFilter.test(pathName)) {
                accm.push(pathName);    
            }
        }
    });
}
if(commander.src) {
    var templateHTML = fs.readFileSync("./conf/tpl/report.template", "utf-8");
    template = _.template(templateHTML);
    reportName = path.resolve(commander.src);
    try {
        var version = fs.readFileSync(reportName + "/version", "utf-8");
    } catch (e) {

    }
    /*
    if(fs.existsSync(reportName + "/version")) {
        var version = fs.readFileSync(reportName + "/version", "utf-8");
        console.log(version);
    }*/
    reportName = reportName.substring(reportName.lastIndexOf("/") + 1);
    if(version) {
        reportName += "-" + version.replace(/\./gi, "_");
    }
    console.log(reportName);

    recursiveFindAllFile(files, commander.src);
    console.log("文件总数：" + totalFiles);
}
// }}}
// {{{ 处理HTML文件的代码 processHTML
/* ================  分界线，上面是处理程序调用的参数的，下面是处理html文件的 ==============*/
/*
 * 解析出HTML文件中的JavaScript代码
 * @param {string} fileName 要解析的文件名称，必须是.html或.htm结尾的
 * @return {string} 从文件中提取出来的JavaScript代码，如果没有就返回空字符串
 */
function processHTML(fileName) {
    var script = "", html, matches,
        ltBegin = 0, gtBegin = 0,
        endScriptTag = 0, nlNumber = 0,
        htmlFragment = "", nlFragment;
    if(fileName.indexOf(".html") === -1 || fileName.indexOf(".htm") === -1) {
        return script;
    }
    html = fs.readFileSync(fileName, "utf-8");
    ltBegin = html.indexOf("<script", ltBegin);
    while(ltBegin !== -1) {
        gtBegin = html.indexOf(">", ltBegin);
        htmlFragment = html.substring(endScriptTag, gtBegin + 2)
        nlFragment = htmlFragment.match(/\n/gm);
        nlNumber = nlFragment && nlFragment.length;
        for(var i = 0; i < nlNumber; i++) {
            script += "\n";
        }
        endScriptTag = html.indexOf("</script>", gtBegin);
        script += html.substring(gtBegin + 1, endScriptTag).trim();
        ltBegin = html.indexOf("<script", ltBegin + 1);
    }
    return { "script" : script, "html": html };
}
// }}}
function beginHint() {
    files.forEach(function(val, index, arr) {
        var scripts = null, tplObj = {
            error: 0, warning: 0, ignored: 0,
            fileName: val, errors: []
        },
        ccResult;
        if(val.indexOf(".html") !== -1) {
            afterProcessHTML = processHTML(val);
            scripts = afterProcessHTML.script;
            if(!cc.check(afterProcessHTML.html, true)) {
                classifyErrors(tplObj, cc.error());
            }
        } else {
            scripts = fs.readFileSync(val, "utf-8");
            if(!cc.check(scripts)) {
                classifyErrors(tplObj, cc.error());
            }
        }
        if(scripts !== "" && !jshint(scripts, config.hint, config.global)) {
            var out = jshint.data(),
                errors = out.errors;
            classifyErrors(tplObj, errors);
        }
        console.log("error: " + tplObj.error + " warning: " + tplObj.warning + " ignored: " + tplObj.ignored + ". file: " + val);
        output.files.push(tplObj);
    });
    return output;
}
function classifyErrors(tplObj, errors) {
    var i, errLength, 
        errorFilter = config.errordef;
    for(i = 0, length = errors.length; i < length; i++) {
        error = errors[i];
        if(!!error) {
            errors[i].level = "error";
            for(key in errorFilter) {
                if(error.raw && error.raw.indexOf(key) > -1) {
                    error.level = errorFilter[key];
                    break;
                }
            }
            if(error.level === "warning") {
                output.warning++;
                tplObj.warning++;
            }
            if(error.level === "error") {
                output.error++;
                tplObj.error++;
            }
            if(error.level === "ignore") {
                output.ignored++;
                output.ignored++;
            }
            output.total++;
        }
    }
    //tplObj.errors = errors;
    tplObj.errors = tplObj.errors.concat(errors);
}
function toReport() {
    var result = beginHint(),
        reportHTML = template(result);
    fs.writeFileSync(reportName, reportHTML, "utf-8");
    console.log("过滤后检查文件数：" + files.length);
    console.log("生成文件路径：" + path.resolve("./" + reportName+ ".html"));
}
toReport();
